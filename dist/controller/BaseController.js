"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IControllerType = exports.BaseController = void 0;
const ZD_Light_1 = require("../lights/ZD_Light");
const Queue_1 = __importDefault(require("../Queue"));
const axios = require('axios').default;
class BaseController {
    constructor(data, log) {
        this.log = log;
        this.callbackList = [];
        this.GroupList = [];
        if (typeof data.ip === 'undefined') {
            this.log.debug(`Initializing base controller.`);
            return;
        }
        this.ip = data.ip;
        this.name = data.Controller;
        this.type = data.type;
        this.platform = data.platform;
        this.hideGroups = data.hideGroups;
        this.independentColors = data.independentColors;
        log.info(`Assigning ${this.type} Controller to IP ${this.ip}`);
        // this.updateLights();
        setTimeout(async () => { await this.pollController(); }, 30000);
    }
    getStatus(result) {
        switch (result) {
            case 0:
                return ('Ok'); //StatusOk
            case (1):
                return ('Unknown Method'); //StatusUnknownMethod
            case (101):
                return ('Unparseable Request'); //StatusUnparseableRequest
            case (102):
                return ('Invalid Request'); //StatusInvalidRequest
            case (151):
                return ('Color Value Out of Range');
            case (201):
                return ('Precondition Failed'); //StatusPreconditionFailed
            case (202):
                return ('Group Name In Use'); //StatusGroupNameInUse
            case (205):
                return ('Group Number In Use'); //StatusGroupNumberInUse
            case (241):
                return ('Item Does Not Exist'); //StatusThemeIndexOutOfRange
            case (242):
                return ('Bad Group Number'); //StatusThemeIndexOutOfRange
            case (243):
                return ('Theme Index Out Of Range'); //StatusThemeIndexOutOfRange
            case (251):
                return ('Bad Theme Index'); //StatusThemeIndexOutOfRange
            case (252):
                return ('Theme Changes Restricted'); //StatusThemeIndexOutOfRange
            default:
                return ('Unknown status');
        }
    }
    async doRequest(url, data) {
        return new Promise(async (resolve, reject) => {
            try {
                switch (url) {
                    case 'GroupListGet':
                        if (this.hideGroups)
                            return;
                        if (typeof this.cacheGroupList !== 'undefined' && Date.now() - this.cacheGroupList < 2000) {
                            resolve({ Status: 1, StatusStr: 'Cached', GroupList: this.GroupList });
                            return;
                        }
                        break;
                    case 'ThemeListGet':
                        if (typeof this.cacheThemeList !== 'undefined' && Date.now() - this.cacheThemeList < 2000) {
                            resolve({ Status: 1, StatusStr: 'Cached', ThemeList: this.ThemeList });
                            return;
                        }
                        break;
                    case 'ColorListGet':
                        if (typeof this.cacheColorList !== 'undefined' && Date.now() - this.cacheColorList < 2000) {
                            resolve({ Status: 1, StatusStr: 'Cached', ColorList: this.ColorList });
                            return;
                        }
                        break;
                }
                const response = await axios({
                    method: 'post',
                    url: 'http://' + this.ip + '/' + url + '.json',
                    data,
                    headers: {
                        'cache-control': 'no-cache'
                    },
                    timeout: 750
                });
                response.data.StatusStr = this.getStatus(response.data.Status);
                if (response.data.StatusStr !== 'Ok' || response.code === 'ETIMEOUT') {
                    this.log.error(`Controller ${this.name} responded with error ${response.data.StatusStr} to '${url}'`);
                    resolve({ Status: 1, StatusStr: 'Ok', GroupList: this.GroupList || [], ThemeList: this.ThemeList || [], ColorList: this.ColorList || [] });
                }
                else
                    resolve(response.data);
            }
            catch (err) {
                this.log.error(`Error communicating with controller ${this.name}. URL ${url}.json.\n\t${err}`);
                reject(err);
            }
        });
    }
    async sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
    async IlluminateAllAsync() {
        return Queue_1.default.enqueue(async () => {
            let status = await this.doRequest('IlluminateAll');
            return status;
        });
    }
    async ExtinguishAllAsync() {
        return Queue_1.default.enqueue(async () => {
            let status = await this.doRequest('ExtinguishAll');
            return status;
        });
    }
    async GetGroupAsync(group) {
        if (this.hideGroups)
            return;
        return new Promise(async (resolve, reject) => {
            try {
                await this.GroupListGetAsync();
                for (let i in this.GroupList) {
                    if (this.GroupList[i].GroupNumber === group)
                        return resolve(this.GroupList[i]);
                }
                reject(`No Group Found in GroupGetAsync for group ${group}.\n${JSON.stringify(this.GroupList)}`);
            }
            catch (err) {
                reject(`Error with GetGroupAsync: ${err}`);
                this.log.error(err);
            }
        });
    }
    async GroupListGetAsync() {
        // Get the list of light groups from the controller
        if (typeof this.cacheGroupList !== 'undefined' && Date.now() - this.cacheGroupList < 2000) {
            return (this.GroupList);
        }
        return Queue_1.default.enqueue(async () => {
            let data = await this.doRequest('GroupListGet');
            if (data.Status === 0) {
                this.cacheGroupList = Date.now();
                this.processGroupListGet(data);
            }
            return this.GroupList;
        });
    }
    processGroupListGet(data) {
        // override with ZDC/ZDTWO
        this.GroupList = data.GroupList;
        for (let i in this.GroupList) {
            this.GroupList[i].type = ZD_Light_1.ILightType.ZD;
        }
    }
    async GroupListEditAsync(name, groupNumber, color) {
        // Same in ZDC/ZDTWO
        var requestData = JSON.stringify({
            'Name': name,
            'GroupNumber': groupNumber,
            'Color': color
        });
        return Queue_1.default.enqueue(async () => {
            let status = await this.doRequest('GroupListEdit', requestData);
            return status;
        });
        /*     let status = await this.queueRequest('GroupListEdit', requestData);
            return status; */
    }
    async ThemeListGetAsync() {
        if (typeof this.cacheThemeList !== 'undefined' && Date.now() - this.cacheThemeList < 2000) {
            return (this.ThemeList);
        }
        return Queue_1.default.enqueue(async () => {
            let data = await this.doRequest('ThemeListGet');
            if (data.Status === 0) {
                this.cacheThemeList = Date.now();
                this.processThemeListGet(data);
            }
            return this.ThemeList;
        });
    }
    processThemeListGet(data) {
        this.ThemeList = data.ThemeList;
        for (var i in this.ThemeList) {
            this.ThemeList[i].isOn = this.ThemeList[i].OnOff === 1;
            this.ThemeList[i].type = ZD_Light_1.ILightType.THEME;
        }
    }
    async GetThemeAsync(index) {
        return new Promise(async (resolve, reject) => {
            try {
                await this.ThemeListGetAsync();
                for (let i in this.ThemeList) {
                    if (this.ThemeList[i].ThemeIndex === index)
                        return resolve(this.ThemeList[i]);
                }
                reject(`No Theme Found in ThemeGetAsync for theme ${index}.\n${JSON.stringify(this.ThemeList)}`);
            }
            catch (err) {
                this.log.error(err);
                reject(`Error with GetThemeAsync ${err}`);
            }
        });
    }
    async IlluminateThemeAsync(themeIndex, onOff) {
        return Queue_1.default.enqueue(async () => {
            let status = await this.doRequest('IlluminateTheme', {
                'ThemeIndex': themeIndex,
                'OnOff': onOff
            });
            this.cacheThemeList = undefined;
            setTimeout(async () => { await this.updateLights(); }, 250);
            return status;
        });
    }
    async IlluminateGroupAsync(groupNumber, desiredIntensity) {
        return Queue_1.default.enqueue(async () => {
            let status = await this.doRequest('IlluminateGroup', {
                'GroupNumber': groupNumber,
                'Intensity': desiredIntensity
            });
            return status;
        });
    }
    async ColorListGetAsync() {
        return {};
    }
    async ColorListSetAsync(color, hue, saturation) {
        return {};
    }
    processColorListGet(data) {
        this.ColorList = data.ColorList;
    }
    ;
    async GetColorAsync(color) { return {}; }
    registerCallback(UUID, type, index, characteristic, fn) {
        // look for an existing UUID/characteristic pair and update that if the light attributes get updates
        for (let i = 0; i < this.callbackList.length; i++) {
            let callback = this.callbackList[i];
            if (callback.UUID == UUID && callback.characteristic === characteristic) {
                callback = { UUID, type, index, characteristic, fn };
                return;
            }
        }
        // not found, add a new callback.
        this.callbackList.push({ UUID, type, index, characteristic, fn });
    }
    execCallbacks() {
        for (let i = 0; i < this.callbackList.length; i++) {
            let callback = this.callbackList[i];
            try {
                switch (callback.type) {
                    case ZD_Light_1.ILightType.ZD:
                    case ZD_Light_1.ILightType.ZDC:
                        if (callback.characteristic.name === this.platform.Characteristic.Brightness.name) {
                            for (let i in this.GroupList) { // need to use loop as these are not 0 based indexes
                                if (this.GroupList[i].GroupNumber === callback.index) {
                                    if (typeof this.GroupList[i].Intensity !== 'undefined')
                                        callback.fn(this.GroupList[i].Intensity);
                                    break;
                                }
                            }
                            // let group = this.GroupList.find(g=>g.GroupNumber === callback.index, this.GroupList);
                        }
                        break;
                    case ZD_Light_1.ILightType.THEME:
                        if (callback.characteristic.name === this.platform.Characteristic.On.name) {
                            for (let i in this.GroupList) { // need to use loop as these are not 0 based indexes
                                if (this.ThemeList[i].ThemeIndex === callback.index) {
                                    if (typeof this.ThemeList[i].OnOff !== 'undefined')
                                        callback.fn(this.ThemeList[i].OnOff === 1);
                                    break;
                                }
                            }
                        }
                        break;
                }
            }
            catch (err) {
                this.log.error(`execCallbacks: ${err}`);
            }
        }
    }
    async updateLights(force = false) {
        if (force) {
            this.cacheGroupList = undefined;
            this.cacheThemeList = undefined;
        }
        await this.GroupListGetAsync();
        await this.ThemeListGetAsync();
        this.execCallbacks();
    }
    async pollController() {
        try {
            await this.updateLights();
        }
        catch (err) {
            this.log.error(`${this.name} error: ${err}`);
        }
        finally {
            setTimeout(async () => { await this.pollController(); }, 30 * 1000);
        }
    }
}
exports.BaseController = BaseController;
var IControllerType;
(function (IControllerType) {
    IControllerType["ZD"] = "ZD";
    IControllerType["ZDC"] = "ZDC";
    IControllerType["ZDTWO"] = "ZDTWO";
})(IControllerType = exports.IControllerType || (exports.IControllerType = {}));
//# sourceMappingURL=data:application/json;base64,