"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LuxorPlatform = void 0;
const BaseController_1 = require("./controller/BaseController");
const ControllerFactory_1 = require("./controller/ControllerFactory");
const LightFactory_1 = require("./lights/LightFactory");
const ZD_Light_1 = require("./lights/ZD_Light");
const axios = require('axios').default;
class LuxorPlatform {
    constructor(log, config, api) {
        this.log = log;
        this.config = config;
        this.api = api;
        // this is used to track restored cached accessories
        this.accessories = [];
        this.currGroupsAndThemes = [];
        this.config = config;
        this.log = log;
        this.Service = this.api.hap.Service;
        this.Characteristic = this.api.hap.Characteristic;
        this.Name = config.name;
        this.lastDateAdded = Date.now();
        this.controller = ControllerFactory_1.ControllerFactory.createController({ type: 'base' }, this.log);
        if (api) {
            // Save the API object as plugin needs to register new this.api.platformAccessory via this object.
            this.api = api;
            // Listen to event "didFinishLaunching", this means homebridge already finished loading cached accessories
            // Platform Plugin should only register new this.api.platformAccessory that doesn't exist in homebridge after this event.
            // Or start discover new accessories
            this.api.on('didFinishLaunching', this.didFinishLaunchingAsync.bind(this));
        }
    }
    async sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
    // Function invoked when homebridge tries to restore cached accessory
    // Developer can configure accessory at here (like setup event handler)
    configureAccessory(accessory) {
        this.log.debug(`Retrieved cached accessory ${accessory.displayName} with UUID ${accessory.UUID}`);
        this.accessories[accessory.UUID] = accessory;
    }
    async getControllerAsync() {
        // get the name of the controller
        this.log.info(this.Name + ": Starting search for controller at: " + this.config.ipAddr);
        try {
            //Search for controllor and make sure we can find it
            const response = await axios.post(`http://${this.config.ipAddr}/ControllerName.json`);
            let controllerNameData = response.data;
            controllerNameData.ip = this.config.ipAddr;
            controllerNameData.platform = this;
            if (controllerNameData.Controller.substring(0, 5) === 'luxor') {
                controllerNameData.type = BaseController_1.IControllerType.ZD;
            }
            else if (controllerNameData.Controller.substring(0, 5) === 'lxzdc') {
                controllerNameData.type = BaseController_1.IControllerType.ZDC;
            }
            else if (controllerNameData.Controller.substring(0, 5) === 'lxtwo') {
                controllerNameData.type = BaseController_1.IControllerType.ZDTWO;
            }
            else {
                controllerNameData.type = BaseController_1.IControllerType.ZDTWO;
                this.log.info('Found unknown controller named %s of type %s, assuming a ZDTWO', controllerNameData.Controller, controllerNameData.type);
            }
            this.log.info(`Found Controller named ${controllerNameData.Controller} of type ${controllerNameData.type}.`);
            this.controller = ControllerFactory_1.ControllerFactory.createController(controllerNameData, this.log);
        }
        catch (err) {
            this.log.error(this.Name + ' was not able to connect to connect to the controller. ', err);
        }
        ;
    }
    async getControllerGroupListAsync() {
        // Get the list of light groups from the controller
        try {
            let groupLists = await this.controller.GroupListGetAsync();
            this.log.info(`Retrieved ${groupLists.length} light groups from controller.`);
            for (var i in groupLists) {
                this.currGroupsAndThemes.push(groupLists[i]);
            }
        }
        catch (err) {
            this.log.error(`was not able to retrieve light groups from controller.\n${err}\n${err}`);
        }
        ;
    }
    async getControllerThemeListAsync() {
        // Get the list of light LuxorThemes from the controller
        try {
            let themeLists = await this.controller.ThemeListGetAsync();
            this.log.info(`Retrieved ${themeLists.length} themes from controller.`);
            themeLists.push({
                Name: 'Illuminate all lights',
                ThemeIndex: 100,
                OnOff: 0,
                isOn: false,
                type: ZD_Light_1.ILightType.THEME
            });
            themeLists.push({
                Name: 'Extinguish all lights',
                ThemeIndex: 101,
                OnOff: 0,
                isOn: false,
                type: ZD_Light_1.ILightType.THEME
            });
            for (var i in themeLists) {
                themeLists[i].type = ZD_Light_1.ILightType.THEME;
                this.currGroupsAndThemes.push(themeLists[i]);
            }
        }
        catch (err) {
            this.log.error('was not able to retrieve light themes from controller.', err);
        }
        ;
    }
    removeAccessories() {
        for (var UUID in this.accessories) {
            let accessory = this.accessories[UUID];
            if (typeof this.config.removeAllAccessories !== 'undefined' && this.config.removeAllAccessories || typeof this.config.removeAccessories !== 'undefined' && this.config.removeAccessories.includes(accessory.UUID)) {
                this.log.info(`Removing cached accessory ${accessory.displayName} with UUID ${accessory.UUID} per platform configuration settings.`);
                this.api.unregisterPlatformAccessories("homebridge-luxor", "Luxor", [accessory]);
                this.accessories = this.accessories.filter(item => item.UUID !== UUID);
            }
            ;
        }
    }
    addGroupAccessory(lightGroup) {
        var accessory = new this.api.platformAccessory(lightGroup.Name, lightGroup.UUID);
        let context = {
            lastDateAdded: this.lastDateAdded,
            color: lightGroup.Color,
            groupNumber: lightGroup.GroupNumber,
            brightness: lightGroup.Intensity,
            type: lightGroup.type,
            isOn: lightGroup.Intensity > 0
        };
        accessory.context = context;
        LightFactory_1.LightFactory.createLight(this, accessory);
        this.api.registerPlatformAccessories("homebridge-luxor", "Luxor", [accessory]);
    }
    addThemeAccessory(themeGroup) {
        var accessory = new this.api.platformAccessory(themeGroup.Name, themeGroup.UUID);
        let context = {
            lastDateAdded: this.lastDateAdded,
            type: ZD_Light_1.ILightType.THEME,
            isOn: themeGroup.OnOff === 1,
            themeIndex: themeGroup.ThemeIndex,
            OnOff: themeGroup.OnOff
        };
        accessory.context = context;
        LightFactory_1.LightFactory.createLight(this, accessory);
        this.accessories[accessory.UUID] = accessory;
        this.api.registerPlatformAccessories("homebridge-luxor", "Luxor", [accessory]);
    }
    assignUUIDs() {
        for (let i = 0; i < this.currGroupsAndThemes.length; i++) {
            let acc = this.currGroupsAndThemes[i];
            if (typeof acc.ThemeIndex !== 'undefined') {
                acc.UUID = this.api.hap.uuid.generate('luxor.' + `theme-${acc.ThemeIndex}`);
            }
            else {
                acc.UUID = this.api.hap.uuid.generate('luxor.' + `group.-${acc.GroupNumber}`);
            }
        }
    }
    async processAccessories() {
        this.assignUUIDs();
        this.removeAccessories();
        for (var UUID in this.accessories) {
            let cachedAcc = this.accessories[UUID];
            // look for match on current devices
            let remove = true;
            for (let j = 0; j < this.currGroupsAndThemes.length; j++) {
                let currAcc = this.currGroupsAndThemes[j];
                if (cachedAcc.UUID === currAcc.UUID) {
                    // found existing device
                    this.log.info(`Loading cached accessory ${cachedAcc.displayName} with UUID ${cachedAcc.UUID}.`);
                    // update cached device (name, etc)
                    let context = cachedAcc.context;
                    context.lastDateAdded = this.lastDateAdded;
                    if (typeof currAcc.Color !== 'undefined')
                        context.color = currAcc.Color;
                    if (typeof currAcc.GroupNumber !== 'undefined')
                        context.groupNumber = currAcc.GroupNumber;
                    if (typeof currAcc.ThemeIndex !== 'undefined')
                        context.themeIndex = currAcc.ThemeIndex;
                    if (typeof currAcc.Intensity !== 'undefined') {
                        context.brightness = currAcc.Intensity;
                        context.isOn = currAcc.Intensity > 0;
                    }
                    if (typeof currAcc.type !== 'undefined')
                        context.type = currAcc.type;
                    if (typeof currAcc.isOn !== 'undefined')
                        context.isOn = currAcc.isOn;
                    if (typeof currAcc.Name !== 'undefined')
                        cachedAcc.displayName = currAcc.Name;
                    cachedAcc.context = context;
                    this.api.updatePlatformAccessories([cachedAcc]);
                    LightFactory_1.LightFactory.createLight(this, cachedAcc);
                    this.currGroupsAndThemes.splice(j, 1);
                    remove = false;
                    break;
                }
            }
            // remove the cachedAcc that can't be matched
            if (remove) {
                this.log.info(`Removing cached accessory ${cachedAcc.displayName} with UUID ${cachedAcc.UUID}.`);
                this.api.unregisterPlatformAccessories("homebridge-luxor", "Luxor", [cachedAcc]);
            }
        }
        // add any new accessories that were not previously matched
        if (this.currGroupsAndThemes.length > 0) {
            for (let j = 0; j < this.currGroupsAndThemes.length; j++) {
                let currAcc = this.currGroupsAndThemes[j];
                this.log.info(`Adding new accessory ${currAcc.Name} with UUID ${currAcc.UUID}.`);
                if (currAcc.type === ZD_Light_1.ILightType.THEME)
                    this.addThemeAccessory(currAcc);
                else
                    this.addGroupAccessory(currAcc);
            }
        }
    }
    async didFinishLaunchingAsync() {
        if (!this.config.ipAddr) {
            this.log.error(this.Name + " needs an IP Address in the config file.  Please see sample_config.json.");
        }
        try {
            await this.getControllerAsync();
            //this.retrieveCachedAccessories();
            await this.getControllerGroupListAsync();
            await this.getControllerThemeListAsync();
            await this.processAccessories();
            // this.removeOphanedAccessories();
            this.log.info('Finished initializing');
        }
        catch (err) {
            this.log.error('Error in didFinishLaunching', err);
        }
        ;
    }
}
exports.LuxorPlatform = LuxorPlatform;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTHV4b3JQbGF0Zm9ybS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9MdXhvclBsYXRmb3JtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUlBLGdFQUFzRztBQUN0RyxzRUFBbUU7QUFDbkUsd0RBQXFEO0FBRXJELGdEQUErQztBQUUvQyxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDO0FBR3ZDLE1BQWEsYUFBYTtJQVV0QixZQUNvQixHQUFXLEVBQ1gsTUFBc0IsRUFDdEIsR0FBUTtRQUZSLFFBQUcsR0FBSCxHQUFHLENBQVE7UUFDWCxXQUFNLEdBQU4sTUFBTSxDQUFnQjtRQUN0QixRQUFHLEdBQUgsR0FBRyxDQUFLO1FBWjVCLG9EQUFvRDtRQUM3QyxnQkFBVyxHQUF3QixFQUFFLENBQUM7UUFNckMsd0JBQW1CLEdBQWdDLEVBQUUsQ0FBQztRQU8xRCxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNmLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDO1FBQ2xELElBQUksQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQztRQUN4QixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNoQyxJQUFJLENBQUMsVUFBVSxHQUFHLHFDQUFpQixDQUFDLGdCQUFnQixDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUVoRixJQUFJLEdBQUcsRUFBRTtZQUNMLGtHQUFrRztZQUNsRyxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FB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QUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUMxQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyx3QkFBd0IsT0FBTyxDQUFDLElBQUksY0FBYyxPQUFPLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQztnQkFDakYsSUFBSSxPQUFPLENBQUMsSUFBSSxLQUFLLHFCQUFVLENBQUMsS0FBSztvQkFDakMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxDQUFDOztvQkFFaEMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQ3ZDO1NBQ0o7SUFDTCxDQUFDO0lBRUQsS0FBSyxDQUFDLHVCQUF1QjtRQUN6QixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7WUFDckIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRywwRUFBMEUsQ0FBQyxDQUFDO1NBQzFHO1FBQ0QsSUFBSTtZQUNBLE1BQU0sSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7WUFDaEMsbUNBQW1DO1lBQ25DLE1BQU0sSUFBSSxDQUFDLDJCQUEyQixFQUFFLENBQUM7WUFDekMsTUFBTSxJQUFJLENBQUMsMkJBQTJCLEVBQUUsQ0FBQztZQUN6QyxNQUFNLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1lBQ2hDLG1DQUFtQztZQUNuQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1NBQzFDO1FBQ0QsT0FBTyxHQUFHLEVBQUU7WUFDUixJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyw2QkFBNkIsRUFBRSxHQUFHLENBQUMsQ0FBQztTQUN0RDtRQUFBLENBQUM7SUFDTixDQUFDO0NBQ0o7QUE5T0Qsc0NBOE9DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYWNjZXNzIH0gZnJvbSAnZnMnO1xuaW1wb3J0IHsgQVBJLCBDaGFyYWN0ZXJpc3RpYywgRHluYW1pY1BsYXRmb3JtUGx1Z2luLCBMb2dnZXIsIFBsYXRmb3JtQWNjZXNzb3J5LCBQbGF0Zm9ybUNvbmZpZywgU2VydmljZSB9IGZyb20gJ2hvbWVicmlkZ2UnO1xuaW1wb3J0IHsgY3dkIH0gZnJvbSAncHJvY2Vzcyc7XG5cbmltcG9ydCB7IEJhc2VDb250cm9sbGVyLCBJQ29udHJvbGxlclR5cGUsIElHcm91cExpc3QsIElUaGVtZUxpc3QgfSBmcm9tICcuL2NvbnRyb2xsZXIvQmFzZUNvbnRyb2xsZXInO1xuaW1wb3J0IHsgQ29udHJvbGxlckZhY3RvcnkgfSBmcm9tICcuL2NvbnRyb2xsZXIvQ29udHJvbGxlckZhY3RvcnknO1xuaW1wb3J0IHsgTGlnaHRGYWN0b3J5IH0gZnJvbSAnLi9saWdodHMvTGlnaHRGYWN0b3J5JztcbmltcG9ydCB7IFRoZW1lIH0gZnJvbSAnLi9saWdodHMvVGhlbWUnO1xuaW1wb3J0IHsgSUxpZ2h0VHlwZSB9IGZyb20gJy4vbGlnaHRzL1pEX0xpZ2h0JztcblxuY29uc3QgYXhpb3MgPSByZXF1aXJlKCdheGlvcycpLmRlZmF1bHQ7XG5cblxuZXhwb3J0IGNsYXNzIEx1eG9yUGxhdGZvcm0gaW1wbGVtZW50cyBEeW5hbWljUGxhdGZvcm1QbHVnaW4ge1xuICAgIC8vIHRoaXMgaXMgdXNlZCB0byB0cmFjayByZXN0b3JlZCBjYWNoZWQgYWNjZXNzb3JpZXNcbiAgICBwdWJsaWMgYWNjZXNzb3JpZXM6IFBsYXRmb3JtQWNjZXNzb3J5W10gPSBbXTtcbiAgICBwdWJsaWMgY29udHJvbGxlcjogQmFzZUNvbnRyb2xsZXI7Ly8gd2lsbCBiZSBhc3NpZ25lZCB0byBaRCBvciBaREMgY29udHJvbGxlclxuICAgIHB1YmxpYyBOYW1lOiBzdHJpbmc7XG4gICAgcHVibGljIGxhc3REYXRlQWRkZWQ6IG51bWJlcjtcbiAgICBwdWJsaWMgcmVhZG9ubHkgU2VydmljZTogdHlwZW9mIFNlcnZpY2U7XG4gICAgcHVibGljIHJlYWRvbmx5IENoYXJhY3RlcmlzdGljOiB0eXBlb2YgQ2hhcmFjdGVyaXN0aWM7XG4gICAgcHJpdmF0ZSBjdXJyR3JvdXBzQW5kVGhlbWVzOiBJR3JvdXBMaXN0W10gJiBJVGhlbWVMaXN0W10gPSBbXTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwdWJsaWMgcmVhZG9ubHkgbG9nOiBMb2dnZXIsXG4gICAgICAgIHB1YmxpYyByZWFkb25seSBjb25maWc6IFBsYXRmb3JtQ29uZmlnLFxuICAgICAgICBwdWJsaWMgcmVhZG9ubHkgYXBpOiBBUElcbiAgICApIHtcbiAgICAgICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgICAgIHRoaXMubG9nID0gbG9nO1xuICAgICAgICB0aGlzLlNlcnZpY2UgPSB0aGlzLmFwaS5oYXAuU2VydmljZTtcbiAgICAgICAgdGhpcy5DaGFyYWN0ZXJpc3RpYyA9IHRoaXMuYXBpLmhhcC5DaGFyYWN0ZXJpc3RpYztcbiAgICAgICAgdGhpcy5OYW1lID0gY29uZmlnLm5hbWU7XG4gICAgICAgIHRoaXMubGFzdERhdGVBZGRlZCA9IERhdGUubm93KCk7XG4gICAgICAgIHRoaXMuY29udHJvbGxlciA9IENvbnRyb2xsZXJGYWN0b3J5LmNyZWF0ZUNvbnRyb2xsZXIoeyB0eXBlOiAnYmFzZScgfSwgdGhpcy5sb2cpXG5cbiAgICAgICAgaWYgKGFwaSkge1xuICAgICAgICAgICAgLy8gU2F2ZSB0aGUgQVBJIG9iamVjdCBhcyBwbHVnaW4gbmVlZHMgdG8gcmVnaXN0ZXIgbmV3IHRoaXMuYXBpLnBsYXRmb3JtQWNjZXNzb3J5IHZpYSB0aGlzIG9iamVjdC5cbiAgICAgICAgICAgIHRoaXMuYXBpID0gYXBpO1xuXG4gICAgICAgICAgICAvLyBMaXN0ZW4gdG8gZXZlbnQgXCJkaWRGaW5pc2hMYXVuY2hpbmdcIiwgdGhpcyBtZWFucyBob21lYnJpZGdlIGFscmVhZHkgZmluaXNoZWQgbG9hZGluZyBjYWNoZWQgYWNjZXNzb3JpZXNcbiAgICAgICAgICAgIC8vIFBsYXRmb3JtIFBsdWdpbiBzaG91bGQgb25seSByZWdpc3RlciBuZXcgdGhpcy5hcGkucGxhdGZvcm1BY2Nlc3NvcnkgdGhhdCBkb2Vzbid0IGV4aXN0IGluIGhvbWVicmlkZ2UgYWZ0ZXIgdGhpcyBldmVudC5cbiAgICAgICAgICAgIC8vIE9yIHN0YXJ0IGRpc2NvdmVyIG5ldyBhY2Nlc3Nvcmllc1xuICAgICAgICAgICAgdGhpcy5hcGkub24oJ2RpZEZpbmlzaExhdW5jaGluZycsIHRoaXMuZGlkRmluaXNoTGF1bmNoaW5nQXN5bmMuYmluZCh0aGlzKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgc2xlZXAobXMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBtcykpO1xuICAgIH1cbiAgICAvLyBGdW5jdGlvbiBpbnZva2VkIHdoZW4gaG9tZWJyaWRnZSB0cmllcyB0byByZXN0b3JlIGNhY2hlZCBhY2Nlc3NvcnlcbiAgICAvLyBEZXZlbG9wZXIgY2FuIGNvbmZpZ3VyZSBhY2Nlc3NvcnkgYXQgaGVyZSAobGlrZSBzZXR1cCBldmVudCBoYW5kbGVyKVxuICAgIGNvbmZpZ3VyZUFjY2Vzc29yeShhY2Nlc3Nvcnk6IFBsYXRmb3JtQWNjZXNzb3J5KSB7XG4gICAgICAgIHRoaXMubG9nLmRlYnVnKGBSZXRyaWV2ZWQgY2FjaGVkIGFjY2Vzc29yeSAke2FjY2Vzc29yeS5kaXNwbGF5TmFtZX0gd2l0aCBVVUlEICR7YWNjZXNzb3J5LlVVSUR9YCk7XG4gICAgICAgIHRoaXMuYWNjZXNzb3JpZXNbYWNjZXNzb3J5LlVVSURdID0gYWNjZXNzb3J5O1xuICAgIH1cbiAgICBhc3luYyBnZXRDb250cm9sbGVyQXN5bmMoKSB7XG4gICAgICAgIC8vIGdldCB0aGUgbmFtZSBvZiB0aGUgY29udHJvbGxlclxuXG4gICAgICAgIHRoaXMubG9nLmluZm8odGhpcy5OYW1lICsgXCI6IFN0YXJ0aW5nIHNlYXJjaCBmb3IgY29udHJvbGxlciBhdDogXCIgKyB0aGlzLmNvbmZpZy5pcEFkZHIpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy9TZWFyY2ggZm9yIGNvbnRyb2xsb3IgYW5kIG1ha2Ugc3VyZSB3ZSBjYW4gZmluZCBpdFxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5wb3N0KFxuICAgICAgICAgICAgICAgIGBodHRwOi8vJHt0aGlzLmNvbmZpZy5pcEFkZHJ9L0NvbnRyb2xsZXJOYW1lLmpzb25gXG4gICAgICAgICAgICApXG5cbiAgICAgICAgICAgIGxldCBjb250cm9sbGVyTmFtZURhdGEgPSByZXNwb25zZS5kYXRhO1xuICAgICAgICAgICAgY29udHJvbGxlck5hbWVEYXRhLmlwID0gdGhpcy5jb25maWcuaXBBZGRyO1xuICAgICAgICAgICAgY29udHJvbGxlck5hbWVEYXRhLnBsYXRmb3JtID0gdGhpcztcbiAgICAgICAgICAgIGlmIChjb250cm9sbGVyTmFtZURhdGEuQ29udHJvbGxlci5zdWJzdHJpbmcoMCwgNSkgPT09ICdsdXhvcicpIHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyTmFtZURhdGEudHlwZSA9IElDb250cm9sbGVyVHlwZS5aRDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29udHJvbGxlck5hbWVEYXRhLkNvbnRyb2xsZXIuc3Vic3RyaW5nKDAsIDUpID09PSAnbHh6ZGMnKSB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlck5hbWVEYXRhLnR5cGUgPSBJQ29udHJvbGxlclR5cGUuWkRDO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjb250cm9sbGVyTmFtZURhdGEuQ29udHJvbGxlci5zdWJzdHJpbmcoMCwgNSkgPT09ICdseHR3bycpIHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyTmFtZURhdGEudHlwZSA9IElDb250cm9sbGVyVHlwZS5aRFRXTztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlck5hbWVEYXRhLnR5cGUgPSBJQ29udHJvbGxlclR5cGUuWkRUV087XG4gICAgICAgICAgICAgICAgdGhpcy5sb2cuaW5mbygnRm91bmQgdW5rbm93biBjb250cm9sbGVyIG5hbWVkICVzIG9mIHR5cGUgJXMsIGFzc3VtaW5nIGEgWkRUV08nLCBjb250cm9sbGVyTmFtZURhdGEuQ29udHJvbGxlciwgY29udHJvbGxlck5hbWVEYXRhLnR5cGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5sb2cuaW5mbyhgRm91bmQgQ29udHJvbGxlciBuYW1lZCAke2NvbnRyb2xsZXJOYW1lRGF0YS5Db250cm9sbGVyfSBvZiB0eXBlICR7Y29udHJvbGxlck5hbWVEYXRhLnR5cGV9LmApO1xuICAgICAgICAgICAgdGhpcy5jb250cm9sbGVyID0gQ29udHJvbGxlckZhY3RvcnkuY3JlYXRlQ29udHJvbGxlcihjb250cm9sbGVyTmFtZURhdGEsIHRoaXMubG9nKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmxvZy5lcnJvcih0aGlzLk5hbWUgKyAnIHdhcyBub3QgYWJsZSB0byBjb25uZWN0IHRvIGNvbm5lY3QgdG8gdGhlIGNvbnRyb2xsZXIuICcsIGVycik7XG4gICAgICAgIH07XG5cbiAgICB9XG4gICAgYXN5bmMgZ2V0Q29udHJvbGxlckdyb3VwTGlzdEFzeW5jKCkge1xuICAgICAgICAvLyBHZXQgdGhlIGxpc3Qgb2YgbGlnaHQgZ3JvdXBzIGZyb20gdGhlIGNvbnRyb2xsZXJcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxldCBncm91cExpc3RzID0gYXdhaXQgdGhpcy5jb250cm9sbGVyLkdyb3VwTGlzdEdldEFzeW5jKCk7XG4gICAgICAgICAgICB0aGlzLmxvZy5pbmZvKGBSZXRyaWV2ZWQgJHtncm91cExpc3RzLmxlbmd0aH0gbGlnaHQgZ3JvdXBzIGZyb20gY29udHJvbGxlci5gKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgaW4gZ3JvdXBMaXN0cykge1xuICAgICAgICAgICAgICAgIHRoaXMuY3Vyckdyb3Vwc0FuZFRoZW1lcy5wdXNoKGdyb3VwTGlzdHNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMubG9nLmVycm9yKGB3YXMgbm90IGFibGUgdG8gcmV0cmlldmUgbGlnaHQgZ3JvdXBzIGZyb20gY29udHJvbGxlci5cXG4ke2Vycn1cXG4ke2Vycn1gKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0Q29udHJvbGxlclRoZW1lTGlzdEFzeW5jKCkge1xuICAgICAgICAvLyBHZXQgdGhlIGxpc3Qgb2YgbGlnaHQgTHV4b3JUaGVtZXMgZnJvbSB0aGUgY29udHJvbGxlclxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbGV0IHRoZW1lTGlzdHMgPSBhd2FpdCB0aGlzLmNvbnRyb2xsZXIuVGhlbWVMaXN0R2V0QXN5bmMoKTtcbiAgICAgICAgICAgIHRoaXMubG9nLmluZm8oYFJldHJpZXZlZCAke3RoZW1lTGlzdHMubGVuZ3RofSB0aGVtZXMgZnJvbSBjb250cm9sbGVyLmApO1xuXG4gICAgICAgICAgICB0aGVtZUxpc3RzLnB1c2goe1xuICAgICAgICAgICAgICAgIE5hbWU6ICdJbGx1bWluYXRlIGFsbCBsaWdodHMnLFxuICAgICAgICAgICAgICAgIFRoZW1lSW5kZXg6IDEwMCxcbiAgICAgICAgICAgICAgICBPbk9mZjogMCxcbiAgICAgICAgICAgICAgICBpc09uOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB0eXBlOiBJTGlnaHRUeXBlLlRIRU1FXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoZW1lTGlzdHMucHVzaCh7XG4gICAgICAgICAgICAgICAgTmFtZTogJ0V4dGluZ3Vpc2ggYWxsIGxpZ2h0cycsXG4gICAgICAgICAgICAgICAgVGhlbWVJbmRleDogMTAxLFxuICAgICAgICAgICAgICAgIE9uT2ZmOiAwLFxuICAgICAgICAgICAgICAgIGlzT246IGZhbHNlLFxuICAgICAgICAgICAgICAgIHR5cGU6IElMaWdodFR5cGUuVEhFTUVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZm9yICh2YXIgaSBpbiB0aGVtZUxpc3RzKSB7XG4gICAgICAgICAgICAgICAgdGhlbWVMaXN0c1tpXS50eXBlID0gSUxpZ2h0VHlwZS5USEVNRTtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJHcm91cHNBbmRUaGVtZXMucHVzaCh0aGVtZUxpc3RzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmxvZy5lcnJvcignd2FzIG5vdCBhYmxlIHRvIHJldHJpZXZlIGxpZ2h0IHRoZW1lcyBmcm9tIGNvbnRyb2xsZXIuJywgZXJyKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICByZW1vdmVBY2Nlc3NvcmllcygpIHtcbiAgICAgICAgZm9yICh2YXIgVVVJRCBpbiB0aGlzLmFjY2Vzc29yaWVzKSB7XG4gICAgICAgICAgICBsZXQgYWNjZXNzb3J5ID0gdGhpcy5hY2Nlc3Nvcmllc1tVVUlEXTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5jb25maWcucmVtb3ZlQWxsQWNjZXNzb3JpZXMgIT09ICd1bmRlZmluZWQnICYmIHRoaXMuY29uZmlnLnJlbW92ZUFsbEFjY2Vzc29yaWVzIHx8IHR5cGVvZiB0aGlzLmNvbmZpZy5yZW1vdmVBY2Nlc3NvcmllcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdGhpcy5jb25maWcucmVtb3ZlQWNjZXNzb3JpZXMuaW5jbHVkZXMoYWNjZXNzb3J5LlVVSUQpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2cuaW5mbyhgUmVtb3ZpbmcgY2FjaGVkIGFjY2Vzc29yeSAke2FjY2Vzc29yeS5kaXNwbGF5TmFtZX0gd2l0aCBVVUlEICR7YWNjZXNzb3J5LlVVSUR9IHBlciBwbGF0Zm9ybSBjb25maWd1cmF0aW9uIHNldHRpbmdzLmApO1xuICAgICAgICAgICAgICAgIHRoaXMuYXBpLnVucmVnaXN0ZXJQbGF0Zm9ybUFjY2Vzc29yaWVzKFwiaG9tZWJyaWRnZS1sdXhvclwiLCBcIkx1eG9yXCIsIFthY2Nlc3NvcnldKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFjY2Vzc29yaWVzID0gdGhpcy5hY2Nlc3Nvcmllcy5maWx0ZXIoaXRlbSA9PiBpdGVtLlVVSUQgIT09IFVVSUQpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFkZEdyb3VwQWNjZXNzb3J5KGxpZ2h0R3JvdXA6IElHcm91cExpc3QpIHtcbiAgICAgICAgdmFyIGFjY2Vzc29yeSA9IG5ldyB0aGlzLmFwaS5wbGF0Zm9ybUFjY2Vzc29yeShsaWdodEdyb3VwLk5hbWUsIGxpZ2h0R3JvdXAuVVVJRCk7XG4gICAgICAgIGxldCBjb250ZXh0OiBJQ29udGV4dCA9IHtcbiAgICAgICAgICAgIGxhc3REYXRlQWRkZWQ6IHRoaXMubGFzdERhdGVBZGRlZCxcbiAgICAgICAgICAgIGNvbG9yOiBsaWdodEdyb3VwLkNvbG9yLFxuICAgICAgICAgICAgZ3JvdXBOdW1iZXI6IGxpZ2h0R3JvdXAuR3JvdXBOdW1iZXIsXG4gICAgICAgICAgICBicmlnaHRuZXNzOiBsaWdodEdyb3VwLkludGVuc2l0eSxcbiAgICAgICAgICAgIHR5cGU6IGxpZ2h0R3JvdXAudHlwZSxcbiAgICAgICAgICAgIGlzT246IGxpZ2h0R3JvdXAuSW50ZW5zaXR5ID4gMFxuICAgICAgICB9XG4gICAgICAgIGFjY2Vzc29yeS5jb250ZXh0ID0gY29udGV4dDtcbiAgICAgICAgTGlnaHRGYWN0b3J5LmNyZWF0ZUxpZ2h0KHRoaXMsIGFjY2Vzc29yeSk7XG4gICAgICAgIHRoaXMuYXBpLnJlZ2lzdGVyUGxhdGZvcm1BY2Nlc3NvcmllcyhcImhvbWVicmlkZ2UtbHV4b3JcIiwgXCJMdXhvclwiLCBbYWNjZXNzb3J5XSk7XG4gICAgfVxuXG4gICAgYWRkVGhlbWVBY2Nlc3NvcnkodGhlbWVHcm91cDogSVRoZW1lTGlzdCkge1xuICAgICAgICB2YXIgYWNjZXNzb3J5ID0gbmV3IHRoaXMuYXBpLnBsYXRmb3JtQWNjZXNzb3J5KHRoZW1lR3JvdXAuTmFtZSwgdGhlbWVHcm91cC5VVUlEKTtcbiAgICAgICAgbGV0IGNvbnRleHQ6IElDb250ZXh0ID0ge1xuICAgICAgICAgICAgbGFzdERhdGVBZGRlZDogdGhpcy5sYXN0RGF0ZUFkZGVkLFxuICAgICAgICAgICAgdHlwZTogSUxpZ2h0VHlwZS5USEVNRSxcbiAgICAgICAgICAgIGlzT246IHRoZW1lR3JvdXAuT25PZmYgPT09IDEsXG4gICAgICAgICAgICB0aGVtZUluZGV4OiB0aGVtZUdyb3VwLlRoZW1lSW5kZXgsXG4gICAgICAgICAgICBPbk9mZjogdGhlbWVHcm91cC5Pbk9mZlxuICAgICAgICB9XG4gICAgICAgIGFjY2Vzc29yeS5jb250ZXh0ID0gY29udGV4dDtcbiAgICAgICAgTGlnaHRGYWN0b3J5LmNyZWF0ZUxpZ2h0KHRoaXMsIGFjY2Vzc29yeSk7XG4gICAgICAgIHRoaXMuYWNjZXNzb3JpZXNbYWNjZXNzb3J5LlVVSURdID0gYWNjZXNzb3J5O1xuICAgICAgICB0aGlzLmFwaS5yZWdpc3RlclBsYXRmb3JtQWNjZXNzb3JpZXMoXCJob21lYnJpZGdlLWx1eG9yXCIsIFwiTHV4b3JcIiwgW2FjY2Vzc29yeV0pO1xuICAgIH1cblxuICAgIGFzc2lnblVVSURzKCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY3Vyckdyb3Vwc0FuZFRoZW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGFjYyA9IHRoaXMuY3Vyckdyb3Vwc0FuZFRoZW1lc1tpXTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYWNjLlRoZW1lSW5kZXggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgYWNjLlVVSUQgPSB0aGlzLmFwaS5oYXAudXVpZC5nZW5lcmF0ZSgnbHV4b3IuJyArIGB0aGVtZS0ke2FjYy5UaGVtZUluZGV4fWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYWNjLlVVSUQgPSB0aGlzLmFwaS5oYXAudXVpZC5nZW5lcmF0ZSgnbHV4b3IuJyArIGBncm91cC4tJHthY2MuR3JvdXBOdW1iZXJ9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyBwcm9jZXNzQWNjZXNzb3JpZXMoKSB7XG4gICAgICAgIHRoaXMuYXNzaWduVVVJRHMoKTtcbiAgICAgICAgdGhpcy5yZW1vdmVBY2Nlc3NvcmllcygpXG4gICAgICAgIGZvciAodmFyIFVVSUQgaW4gdGhpcy5hY2Nlc3Nvcmllcykge1xuICAgICAgICAgICAgbGV0IGNhY2hlZEFjYyA9IHRoaXMuYWNjZXNzb3JpZXNbVVVJRF07XG4gICAgICAgICAgICAvLyBsb29rIGZvciBtYXRjaCBvbiBjdXJyZW50IGRldmljZXNcbiAgICAgICAgICAgIGxldCByZW1vdmUgPSB0cnVlO1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmN1cnJHcm91cHNBbmRUaGVtZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgY3VyckFjYyA9IHRoaXMuY3Vyckdyb3Vwc0FuZFRoZW1lc1tqXTtcbiAgICAgICAgICAgICAgICBpZiAoY2FjaGVkQWNjLlVVSUQgPT09IGN1cnJBY2MuVVVJRCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBmb3VuZCBleGlzdGluZyBkZXZpY2VcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2cuaW5mbyhgTG9hZGluZyBjYWNoZWQgYWNjZXNzb3J5ICR7Y2FjaGVkQWNjLmRpc3BsYXlOYW1lfSB3aXRoIFVVSUQgJHtjYWNoZWRBY2MuVVVJRH0uYCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSBjYWNoZWQgZGV2aWNlIChuYW1lLCBldGMpXG4gICAgICAgICAgICAgICAgICAgIGxldCBjb250ZXh0OiBJQ29udGV4dCA9IGNhY2hlZEFjYy5jb250ZXh0IGFzIElDb250ZXh0O1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0Lmxhc3REYXRlQWRkZWQgPSB0aGlzLmxhc3REYXRlQWRkZWQ7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY3VyckFjYy5Db2xvciAhPT0gJ3VuZGVmaW5lZCcpIGNvbnRleHQuY29sb3IgPSBjdXJyQWNjLkNvbG9yO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGN1cnJBY2MuR3JvdXBOdW1iZXIgIT09ICd1bmRlZmluZWQnKSBjb250ZXh0Lmdyb3VwTnVtYmVyID0gY3VyckFjYy5Hcm91cE51bWJlcjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjdXJyQWNjLlRoZW1lSW5kZXggIT09ICd1bmRlZmluZWQnKSBjb250ZXh0LnRoZW1lSW5kZXggPSBjdXJyQWNjLlRoZW1lSW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY3VyckFjYy5JbnRlbnNpdHkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmJyaWdodG5lc3MgPSBjdXJyQWNjLkludGVuc2l0eTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuaXNPbiA9IGN1cnJBY2MuSW50ZW5zaXR5ID4gMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGN1cnJBY2MudHlwZSAhPT0gJ3VuZGVmaW5lZCcpIGNvbnRleHQudHlwZSA9IGN1cnJBY2MudHlwZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjdXJyQWNjLmlzT24gIT09ICd1bmRlZmluZWQnKSBjb250ZXh0LmlzT24gPSBjdXJyQWNjLmlzT247XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY3VyckFjYy5OYW1lICE9PSAndW5kZWZpbmVkJykgY2FjaGVkQWNjLmRpc3BsYXlOYW1lID0gY3VyckFjYy5OYW1lO1xuICAgICAgICAgICAgICAgICAgICBjYWNoZWRBY2MuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXBpLnVwZGF0ZVBsYXRmb3JtQWNjZXNzb3JpZXMoW2NhY2hlZEFjY10pO1xuICAgICAgICAgICAgICAgICAgICBMaWdodEZhY3RvcnkuY3JlYXRlTGlnaHQodGhpcywgY2FjaGVkQWNjKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyR3JvdXBzQW5kVGhlbWVzLnNwbGljZShqLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHJlbW92ZSB0aGUgY2FjaGVkQWNjIHRoYXQgY2FuJ3QgYmUgbWF0Y2hlZFxuICAgICAgICAgICAgaWYgKHJlbW92ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMubG9nLmluZm8oYFJlbW92aW5nIGNhY2hlZCBhY2Nlc3NvcnkgJHtjYWNoZWRBY2MuZGlzcGxheU5hbWV9IHdpdGggVVVJRCAke2NhY2hlZEFjYy5VVUlEfS5gKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFwaS51bnJlZ2lzdGVyUGxhdGZvcm1BY2Nlc3NvcmllcyhcImhvbWVicmlkZ2UtbHV4b3JcIiwgXCJMdXhvclwiLCBbY2FjaGVkQWNjXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gYWRkIGFueSBuZXcgYWNjZXNzb3JpZXMgdGhhdCB3ZXJlIG5vdCBwcmV2aW91c2x5IG1hdGNoZWRcbiAgICAgICAgaWYgKHRoaXMuY3Vyckdyb3Vwc0FuZFRoZW1lcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY3Vyckdyb3Vwc0FuZFRoZW1lcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIGxldCBjdXJyQWNjID0gdGhpcy5jdXJyR3JvdXBzQW5kVGhlbWVzW2pdO1xuICAgICAgICAgICAgICAgIHRoaXMubG9nLmluZm8oYEFkZGluZyBuZXcgYWNjZXNzb3J5ICR7Y3VyckFjYy5OYW1lfSB3aXRoIFVVSUQgJHtjdXJyQWNjLlVVSUR9LmApO1xuICAgICAgICAgICAgICAgIGlmIChjdXJyQWNjLnR5cGUgPT09IElMaWdodFR5cGUuVEhFTUUpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkVGhlbWVBY2Nlc3NvcnkoY3VyckFjYyk7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZEdyb3VwQWNjZXNzb3J5KGN1cnJBY2MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgZGlkRmluaXNoTGF1bmNoaW5nQXN5bmMoKSB7XG4gICAgICAgIGlmICghdGhpcy5jb25maWcuaXBBZGRyKSB7XG4gICAgICAgICAgICB0aGlzLmxvZy5lcnJvcih0aGlzLk5hbWUgKyBcIiBuZWVkcyBhbiBJUCBBZGRyZXNzIGluIHRoZSBjb25maWcgZmlsZS4gIFBsZWFzZSBzZWUgc2FtcGxlX2NvbmZpZy5qc29uLlwiKTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5nZXRDb250cm9sbGVyQXN5bmMoKTtcbiAgICAgICAgICAgIC8vdGhpcy5yZXRyaWV2ZUNhY2hlZEFjY2Vzc29yaWVzKCk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmdldENvbnRyb2xsZXJHcm91cExpc3RBc3luYygpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5nZXRDb250cm9sbGVyVGhlbWVMaXN0QXN5bmMoKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucHJvY2Vzc0FjY2Vzc29yaWVzKCk7XG4gICAgICAgICAgICAvLyB0aGlzLnJlbW92ZU9waGFuZWRBY2Nlc3NvcmllcygpO1xuICAgICAgICAgICAgdGhpcy5sb2cuaW5mbygnRmluaXNoZWQgaW5pdGlhbGl6aW5nJyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5sb2cuZXJyb3IoJ0Vycm9yIGluIGRpZEZpbmlzaExhdW5jaGluZycsIGVycik7XG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0IGludGVyZmFjZSBJQ29udGV4dCB7XG4gICAgbGFzdERhdGVBZGRlZDogbnVtYmVyO1xuICAgIGdyb3VwTnVtYmVyPzogbnVtYmVyO1xuICAgIGJyaWdodG5lc3M/OiBudW1iZXI7XG4gICAgdHlwZTogSUxpZ2h0VHlwZVxuICAgIGNvbG9yPzogbnVtYmVyO1xuICAgIHN0YXR1cz86IGFueTtcbiAgICBpc09uOiBib29sZWFuO1xuICAgIGh1ZT86IG51bWJlcjtcbiAgICBzYXR1cmF0aW9uPzogbnVtYmVyO1xuICAgIHRoZW1lSW5kZXg/OiBudW1iZXI7XG4gICAgT25PZmY/OiAwIHwgMTtcbn0iXX0=